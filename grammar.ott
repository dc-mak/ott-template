% Categories
% X - hide from Tex

embed {{ tex-preamble
% Cosmetic
\renewcommand{\[[TEX_NAME_PREFIX]]kw}[1]{ \mathtt{#1} }
\renewcommand{\[[TEX_NAME_PREFIX]]drule}[4][]{ {\displaystyle\frac{\begin{array}{l}#2\end{array} }{#3}\quad\[[TEX_NAME_PREFIX]]drulename{#4} }\\[\baselineskip] }
\renewcommand{\[[TEX_NAME_PREFIX]]grammartabular}[1]{ \begin{supertabular}{llcllll}#1\end{supertabular} }

% Grammar production comments on the next line
\renewcommand{\[[TEX_NAME_PREFIX]]prodline}[6]{%
& & $#1$ & $#2$ & $#3 #4$ & $#5$ &%
\ifthenelse{ \equal{}{#6} }%
{#6}%
{\\ & & & \multicolumn{4}{p{.5\textwidth} }{#6} } }
\renewcommand{\[[TEX_NAME_PREFIX]]rulehead}[3]{$#1$ & & $#2$ & \multicolumn{4}{l}{#3} }

% Green comments - can't do colorbox because it doesn't wrap (neither does \usepackage{soul}'s \hl)
\usepackage[dvipsnames,usenames]{xcolor}
\definecolor{darkgreen}{rgb}{.0, 0.392, .0}
\renewcommand{\[[TEX_NAME_PREFIX]]com}[1]{ \textcolor{darkgreen}{ #1 } }

% https://tex.stackexchange.com/questions/33401/a-version-of-colorbox-that-works-inside-math-environments
\setlength{\fboxsep}{1pt}
\newcommand{\outpol}[1]{\mathchoice%
  {\colorbox{red!8}{$\displaystyle      \mathit{ #1 } $} }%
  {\colorbox{red!8}{$\textstyle         \mathit{ #1 } $} }%
  {\colorbox{red!8}{$\scriptstyle       \mathit{ #1 } $} }%
  {\colorbox{red!8}{$\scriptscriptstyle \mathit{ #1 } $} } }%
\newcommand{\norm}[1]{ \underline{\mathit{#1} } }
\newcommand{\mathTT}[1]{\mathchoice%
  {\displaystyle      \texttt{ #1 } }%
  {\textstyle         \texttt{ #1 } }%
  {\scriptstyle       \texttt{ #1 } }%
  {\scriptscriptstyle \texttt{ #1 } } }%
}}

grammar

  terminals :: 'terminals_' ::=
    | \       :: :: lambda    {{ tex \lambda             }}
    | -->     :: :: red       {{ tex \longrightarrow     }}
    |  ->     :: :: arrow     {{ tex \rightarrow         }}
    |  ~>     :: :: leadsto   {{ tex \leadsto            }}
    |  =>     :: :: synths    {{ tex \Rightarrow         }}
    |  <=     :: :: checks    {{ tex \Leftarrow          }}
    | |-      :: :: turnstile {{ tex \vdash              }}
    | inSet   :: :: inSet     {{ tex \in                 }}
    | forall  :: :: forall    {{ tex \forall             }}
    | exists  :: :: exists    {{ tex \exists             }}
    | lt      :: :: lt        {{ tex <                   }}
    | cdot    :: :: cdot      {{ tex \cdot               }}
    | :       :: :: of_type   {{ tex {:}                 }}
    | .       :: :: such_that {{ tex . \:                }}
    | dot     :: :: dot       {{ tex \! {.} \!           }}
    | >>      :: :: chevron   {{ tex \gg                 }}
    | :;      :: :: doublecol {{ tex \mathbin{ {:} {:} } }}
    | <       :: :: langle    {{ tex \langle             }}
    | >       :: :: rangle    {{ tex \rangle             }}
    | /\      :: :: and       {{ tex \wedge              }}
    | /\\     :: :: big_and   {{ tex \bigwedge           }}
    | \/      :: :: or        {{ tex \vee                }}
    | \//     :: :: big_or    {{ tex \bigvee             }}
    | [(      :: :: openDen   {{ tex [\![                }}
    | )]      :: :: closeDen  {{ tex ]\!]                }}

metavar ident , x , xp {{ tex {x_p} }}, y , _ ::=
  {{ com subscripts: p for pointers }}

indexvar n , i , j , k ::= {{ com index variables }}

grammar

  % OUT_HACK|x
  out_x {{ tex \outpol{ x } }}   :: 'Out_hack_' ::=  {{ com Ott-hack, ignore }}
    | x :: :: x {{ tex \outpol{ [[x]] } }}

grammar

  ty_int {{ tex int }} , _int {{ tex \_ }} , step :: 'Int_' ::=   {{ ocaml int  }} {{ com OCaml fixed-width integer }}
    | i          ::   :: IndexVar {{ com literal integer }}
    | i_one      :: X :: One      {{ tex 1               }}

grammar

  ty_tag {{ tex tag }} , tag_init {{ tex init }} , tag_value {{ tex value }} :: 'Ty_tag' ::= {{ ocaml tag }} {{ com OCaml type for struct/union tag }}
    | ident :: :: ident

grammar

  base_type {{ tex \beta }} , _bt {{ tex \_ }} :: 'Bt_' ::= {{ com base types }}
    | unit                                   ::   :: Unit     {{ com unit    }}
    | bool                                   ::   :: Bool     {{ com boolean }}
    | integer                                ::   :: Integer  {{ com integer }}
    | record </ ty_tagi : base_typei // i /> ::   :: Record   {{ com records }}
    | map base_type base_type'               ::   :: Map      {{ com map     }}
    | list base_type                         ::   :: List     {{ com list    }}
    | </ base_typei // * // i />             ::   :: Tuple    {{ com tuple   }}
    | set base_type                          ::   :: Set      {{ com set     }}


grammar

  % OUT_HACK|base_type,\beta
  out_base_type {{ tex \outpol{ \beta } }}   :: 'Out_hack_' ::=  {{ com Ott-hack, ignore }}
    | base_type :: :: base_type {{ tex \outpol{ [[base_type]] } }}

grammar

  % Binary operators
  binop {{ tex \mathbin{ binop } }} :: 'Op' ::= {{ ocaml Core.binop }} {{ com binary operators }}
    % arithmetic operators (integer -> integer -> integer)
    | +   :: :: Add   {{ tex \mathbin{ \mathTT{+} } }} {{ com addition       }}
    | -   :: :: Sub   {{ tex \mathbin{ \mathTT{-} } }} {{ com subtraction    }}
    | *   :: :: Mul   {{ tex \mathbin{ \mathTT{*} } }} {{ com multiplication }}
    | /   :: :: Div   {{ tex \mathbin{ \mathTT{/} } }} {{ com division       }}
    % relational operators ( ptr/int -> ptr/int -> bool)
    | =   :: :: Eq    {{ tex \mathbin{ \mathTT{=}  } }} {{ com equality                 }}
    | !=  :: :: Ne    {{ tex \mathbin{ \mathTT{!=} } }} {{ com inequality               }}
    | >   :: :: Gt    {{ tex \mathbin{ \mathTT{>}  } }} {{ com greater than             }}
    | <   :: :: Lt    {{ tex \mathbin{ \mathTT{<}  } }} {{ com less than                }}
    | >=  :: :: Ge    {{ tex \mathbin{ \mathTT{>=} } }} {{ com greater than or equal to }}
    | <=  :: :: Le    {{ tex \mathbin{ \mathTT{<=} } }} {{ com less than or equal to    }}
    % logical connectives ( bool -> bool -> bool)
    | /\  :: :: And   {{ tex \mathbin{ \mathTT{/\char`\\} } }} {{ com conjucntion }}
    | \/  :: :: Or    {{ tex \mathbin{ \mathTT{\char`\\/} } }} {{ com disjunction }}

  arith_binop {{ tex \mathbin{ binop_{arith} } }} :: 'Arith_Op' ::= {{ com arithmentic binary operators }}
    | +   :: :: Add
    | -   :: :: Sub
    | *   :: :: Mul
    | /   :: :: Div

  rel_binop {{ tex \mathbin{ binop_{rel} } }} :: 'Rel_Op' ::= {{ com relational binary operators }}
    | =   :: :: Eq
    | !=  :: :: Ne
    | >   :: :: Gt
    | <   :: :: Lt
    | >=  :: :: Ge
    | <=  :: :: Le

  bool_binop {{ tex \mathbin{ binop_{bool} } }} :: 'Bool_Op' ::= {{ com boolean binary operators }}
    | /\  :: :: And
    | \/  :: :: Or

  subrules
    arith_binop <:: binop
    rel_binop   <:: binop
    bool_binop  <:: binop

metavar impl_const ::= {{ ocaml Implementation.implementation_constant }}
  {{ com implementation-defined constant }}

grammar

  tyvar_sym {{ tex ident }} :: 'Tyvar_sym_' ::= {{ ocaml 'sym }} {{ com Ott-hack, ignore }}
    | ident :: :: ident

grammar

  ty_mem_int {{ tex mem\_int }} :: 'Ty_mem_int' ::= {{ ocaml Impl_mem.integer_value }} {{ com memory integer value }}
    | mem_one  :: M :: One  {{ ocaml Memory.integer_ival Z.one  }} {{ tex 1 }}
    | mem_zero :: M :: Zero {{ ocaml Memory.integer_ival Z.zero }} {{ tex 0 }}

